package ru.mitrakov.self.rush.tester

case class Connect(crcId: Int)
case class Start(crcId: Int, name: String)
case class Go(crcId: Int)
case class FullMessage(crcId: Int, lst: List[Int])
case class SingleMessage(crcId: Int, sid: Int, token: Int, lst: List[Int])
case class OutputMessage(crcId: Int, lst: List[Int])

sealed abstract class Message(val crcId: Int, sid: Int, token: Int)
case class UnspecifiedError(crcid: Int, sid: Int, token: Int, error: Int) extends Message(crcid, sid, token)
case class SignUp(crcid: Int, sid: Int, token: Int, name: String, password: String, agentInfo: String, email: String, promocode: String, error: Int) extends Message(crcid, sid, token)
case class SignIn(crcid: Int, sid: Int, token: Int, `type`: Int, name: String, password: String, agentInfo: String, error: Int) extends Message(crcid, sid, token)
case class SignOut(crcid: Int, sid: Int, token: Int, error: Int) extends Message(crcid, sid, token)
case class UserInfo(crcid: Int, sid: Int, token: Int, error: Int, name: String, promocode: String, character: Int, gems: Int, abilities: List[(Int, Int)]) extends Message(crcid, sid, token)
case class ChangeCharacter(crcid: Int, sid: Int, token: Int, char: Int, error: Int) extends Message(crcid, sid, token)
case class Attack(crcid: Int, sid: Int, token: Int, arg: Int, name: String, error: Int) extends Message(crcid, sid, token)
case class Call(crcid: Int, sid: Int, token: Int, aggressorSid: Int, name: String) extends Message(crcid, sid, token)
case class Accept(crcid: Int, sid: Int, token: Int, aggressorSid: Int, error: Int) extends Message(crcid, sid, token)
case class Reject(crcid: Int, sid: Int, token: Int, aggressorSid: Int, error: Int) extends Message(crcid, sid, token)
case class StopCall(crcid: Int, sid: Int, token: Int, cause: Int, coward: String) extends Message(crcid, sid, token)
case class CancelCall(crcid: Int, sid: Int, token: Int, error: Int) extends Message(crcid, sid, token)
case class ReceiveTraining(crcid: Int, sid: Int, token: Int, error: Int) extends Message(crcid, sid, token)
case class RangeOfProducts(crcid: Int, sid: Int, token: Int, error: Int, abilities: List[(Int, Int, Int)]) extends Message(crcid, sid, token)
case class BuyProduct(crcid: Int, sid: Int, token: Int, abilityID: Int, days: Int, error: Int, name: String, promocode: String, character: Int, gems: Int, abilities: List[(Int, Int)]) extends Message(crcid, sid, token)
case class EnemyName(crcid: Int, sid: Int, token: Int, name: String) extends Message(crcid, sid, token)
case class FullState(crcid: Int, sid: Int, token: Int, state: List[Int]) extends Message(crcid, sid, token)
case class RoundInfo(crcid: Int, sid: Int, token: Int, number: Int, time: Int, aggressor: Boolean, char1: Int, char2: Int, myLives: Int, enemyLives: Int, field: String) extends Message(crcid, sid, token)
case class AbilityList(crcid: Int, sid: Int, token: Int, abilities: List[Int]) extends Message(crcid, sid, token)
case class Move(crcid: Int, sid: Int, token: Int, dir: Int, error: Int) extends Message(crcid, sid, token)
case class UseThing(crcid: Int, sid: Int, token: Int, error: Int) extends Message(crcid, sid, token)
case class UseSkill(crcid: Int, sid: Int, token: Int, skillID: Int, error: Int) extends Message(crcid, sid, token)
case class GiveUp(crcid: Int, sid: Int, token: Int, error: Int) extends Message(crcid, sid, token)
case class StateChanged(crcid: Int, sid: Int, token: Int, objNum: Int, objID: Int, xy: Int, reset: Boolean) extends Message(crcid, sid, token)
case class ScoreChanged(crcid: Int, sid: Int, token: Int, score1: Int, score2: Int) extends Message(crcid, sid, token)
case class EffectChanged(crcid: Int, sid: Int, token: Int, effectID: Int, added: Boolean, objNumber: Int) extends Message(crcid, sid, token)
case class PlayerWounded(crcid: Int, sid: Int, token: Int, me: Boolean, cause: Int, myLives: Int, enemyLives: Int) extends Message(crcid, sid, token)
case class ThingTaken(crcid: Int, sid: Int, token: Int, me: Boolean, objectID: Int) extends Message(crcid, sid, token)
case class ObjectAppended(crcid: Int, sid: Int, token: Int, id: Int, number: Int, xy: Int) extends Message(crcid, sid, token)
case class Finished(crcid: Int, sid: Int, token: Int, gameOver: Boolean, me: Boolean, totalScore1: Int, totalScore2: Int) extends Message(crcid, sid, token)
case class Finished2(crcid: Int, sid: Int, token: Int, gameOver: Boolean, me: Boolean, totalScore1: Int, totalScore2: Int, reward: Int) extends Message(crcid, sid, token)
case class Rating(crcid: Int, sid: Int, token: Int, arg: Int, error: Int, rating: List[Int]) extends Message(crcid, sid, token)
case class FriendList(crcid: Int, sid: Int, token: Int, error: Int, fragNumber: Int, friends: List[(Int, String)]) extends Message(crcid, sid, token)
case class AddFriend(crcid: Int, sid: Int, token: Int, error: Int, character: Int, name: String) extends Message(crcid, sid, token)
case class RemoveFriend(crcid: Int, sid: Int, token: Int, error: Int, name: String) extends Message(crcid, sid, token)
case class CheckPromocode(crcid: Int, sid: Int, token: Int, promocode: String, error: Int, ok: Boolean) extends Message(crcid, sid, token)
case class PromocodeDone(crcid: Int, sid: Int, token: Int, inviter: Boolean, gems: Int, name: String) extends Message(crcid, sid, token)
case class GetSkuGems(crcid: Int, sid: Int, token: Int, data: List[(Int, Int)]) extends Message(crcid, sid, token)
case class CheckPurchase(crcid: Int, sid: Int, token: Int, data: String, signature: String, error: Int, gems: Int, coupon: String) extends Message(crcid, sid, token)
